/* ------------------------------------------------------------------------------------ */
// Header File
#ifndef __SSD1306_FONT_H__
#define __SSD1306_FONT_H__
/* ------------------------------------------------------------------------------------ */
// Dependency
#include <stdint.h>
/* ------------------------------------------------------------------------------------ */
// SSD1306 I2C Address
#ifndef SA0
	#define SSD1306_I2C_ADDRESS					((uint8_t) 0x3C)
#else
	#define SSD1306_I2C_ADDRESS					((uint8_t) 0x3D)
#endif
/* ------------------------------------------------------------------------------------ */
// SSD1306 Characteristics
#define SSD1306_HEIGHT							((uint8_t) 64)
#define SSD1306_WIDTH							((uint8_t) 128)
/* ------------------------------------------------------------------------------------ */
// Indicator regarding the sent bytes
#define SSD1306_CMD_INDICATOR					(0x00)
#define SSD1306_DATA_INDICATOR					(0x40)
/* ------------------------------------------------------------------------------------ */
// I2C Instance
#define SSD1306_I2Cx							(I2C1)
/* ------------------------------------------------------------------------------------ */
// Size of Buffer
#define SIZEOF(X)								(sizeof((X))/sizeof((X)[0]))
/* ------------------------------------------------------------------------------------ */
// <! --- Command Table --- !> //
// Double byte command to select 1 out of 256 contrast steps
#define SSD1306_CMD_SET_CONTRAST                (0x81)
// Resume to RAM content display, Output follows RAM content
#define SSD1306_CMD_ENTIRE_DISP_ON_OUT_RAM      (0xA4)
// Entire display ON, Output ignores RAM content
#define SSD1306_CMD_ENTIRE_DISP_ON              (0xA5)
// Normal display
#define SSD1306_CMD_DISP_NORMAL                 (0xA6)
// Inverse display
#define SSD1306_CMD_DISP_INVERSE                (0xA7)
// Display OFF
#define SSD1306_CMD_DISP_OFF                    (0xAE)
// Display ON
#define SSD1306_CMD_DISP_ON                     (0xAF)
// Set display clock divide ratio/oscillator frequency
#define SSD1306_CMD_SET_DISPLAY_CLOCK_DIV       (0xD5)
// Set multiplex ratio (1/64 duty)
#define SSD1306_CMD_SET_MULTIPLEX               (0xA8)
// Set display offset
#define SSD1306_CMD_SET_DISPLAY_OFFSET          (0xD3)
// Set display start line
#define SSD1306_CMD_SET_START_LINE              (0x40)
// Enable charge pump
#define SSD1306_CMD_CHARGE_PUMP                 (0x8D)
// Set memory addressing mode
#define SSD1306_CMD_MEM_ADDR_MODE               (0x20)
// Set segment re-map (column address 127 is mapped to SEG0)
#define SSD1306_CMD_SET_SEGMENT_REMAP           (0xA1)
// Set COM output scan direction (remapped mode, scan from COM[N-1] to COM0)
#define SSD1306_CMD_SET_COM_SCAN_DIR            (0xC8)
// Set COM pins hardware configuration
#define SSD1306_CMD_SET_COM_PINS                (0xDA)
// Set contrast control
#define SSD1306_CMD_SET_CONTRAST                (0x81)
// Set pre-charge period
#define SSD1306_CMD_SET_PRECHARGE               (0xD9)
// Set VCOMH deselect level
#define SSD1306_CMD_SET_VCOMH_DESELECT          (0xDB)
// Resume to RAM content display
#define SSD1306_CMD_RESUME_TO_RAM_CONTENT       (0xA4)
// Set normal display (non-inverted)
#define SSD1306_CMD_SET_NORMAL_DISPLAY          (0xA6)
// Display ON
#define SSD1306_CMD_DISPLAY_ON                  (0xAF)
// Set Column Address (`Only for Horizontal or vertical Addressing Mode`)
#define SSD1306_CMD_SET_COL_ADDR				(0x21)
// Set Page Address (`Only for Horizontal or vertical Addressing Mode`)
#define SSD1306_CMD_SET_PAGE_ADDR				(0x22)
/* ------------------------------------------------------------------------------------ */
// Set Page Address (`Only for Page Addressing Mode`)
#define SSD1306_CMD_PAGE_MODE_SET_PAGE(VALUE)					(0xB##VALUE)
/* ------------------------------------------------------------------------------------ */
// Set Column Lower Nibble Address (`Only for Page Addressing Mode`)
#define SSD1306_CMD_PAGE_MODE_SET_COL_LOWER_NIBBLE(VALUE)		(0x0##VALUE)
#define SSD1306_CMD_PAGE_MODE_SET_COL_UPPER_NIBBLE(VALUE)		(0x1##VALUE)
/* ------------------------------------------------------------------------------------ */
// Memory Addressing Mode Options
#define SSD1306_MEM_ADDR_MODE_H					(0x00)
#define SSD1306_MEM_ADDR_MODE_V					(0x01)
#define SSD1306_MEM_ADDR_MODE_PAGE				(0x02)
/* ------------------------------------------------------------------------------------ */
/* ------------------------------------------------------------------------------------ */
// Initialization sequence for SSD1306
static const uint8_t SSD1306_initCmd[25] = {
	SSD1306_CMD_DISP_OFF,									// Display OFF
	SSD1306_CMD_SET_DISPLAY_CLOCK_DIV, 0x80,				// Set display clock divide ratio/oscillator frequency
	SSD1306_CMD_SET_MULTIPLEX, 0x3F,						// Set multiplex ratio (1/64 duty)
	SSD1306_CMD_SET_DISPLAY_OFFSET, 0x00,					// Set display offset
	SSD1306_CMD_SET_START_LINE,								// Set display start line
	SSD1306_CMD_CHARGE_PUMP, 0x14,							// Enable charge pump
	SSD1306_CMD_MEM_ADDR_MODE, SSD1306_MEM_ADDR_MODE_PAGE,	// Set memory addressing mode to Page Addressing Mode (0x02)
	SSD1306_CMD_SET_SEGMENT_REMAP,							// Set segment re-map (column address 127 is mapped to SEG0)
	SSD1306_CMD_SET_COM_SCAN_DIR,							// Set COM output scan direction (remapped mode, scan from COM[N-1] to COM0)
	SSD1306_CMD_SET_COM_PINS, 0x12,							// Set COM pins hardware configuration
	SSD1306_CMD_SET_CONTRAST, 0xCF,							// Set contrast control
	SSD1306_CMD_SET_PRECHARGE, 0x22,						// Set pre-charge period
	SSD1306_CMD_SET_VCOMH_DESELECT, 0x20,					// Set VCOMH deselect level
	SSD1306_CMD_RESUME_TO_RAM_CONTENT,						// Resume to RAM content display
	SSD1306_CMD_SET_NORMAL_DISPLAY,							// Set normal display (non-inverted)
	SSD1306_CMD_DISPLAY_ON									// Display ON
};
/* ------------------------------------------------------------------------------------ */
/**
 * @brief Retrieves the index for the input character
 * @param[in] fontArray Pointer to font array
 * @param[in] c The input character
 */
__attribute__ ((always_inline)) inline static uint8_t font_get_index(uint8_t* fontArray, char c) {
	// Final Value
	uint8_t index = 0xFF;
	// Uppercase letters
	if (c >= 'A' && c <= 'Z') {
		index = c - 'A';
	}
	// Lowercase letters 
	else if (c >= 'a' && c <= 'z') {
		index = (c - 'a') + 26;
	} 
	// Digits
	else if (c >= '0' && c <= '9') {
		index = (c - '0') + 52;
	} 
	// Space
	else if (c == 32) {
		index = 62;
	}
	else if(c == '.'){
		index = 63;
	}
	else if(c == '@'){
		index = 64;
	}
	// Default to space for unsupported characters
	else {
		index = 62;
	}
	// Return the index
	return index;
}
/* ------------------------------------------------------------------------------------ */
// 8x8 Working Font
static const uint8_t font8x8[][8] 
= {
	// A
	{0x00, 0xFC, 0x26, 0x27, 0x27, 0x26, 0xFC, 0x00},
	// B
	{0x00, 0xFF, 0x49, 0x49, 0x49, 0x49, 0x36, 0x00},
	// C
	{0x00, 0x3E, 0x41, 0x41, 0x41, 0x41, 0x22, 0x00},
	// D
	{0x00, 0xFF, 0x41, 0x41, 0x41, 0x41, 0x3E, 0x00},
	// E
	{0x00, 0xFF, 0x49, 0x49, 0x49, 0x49, 0x41, 0x00},
	// F
	{0x00, 0xFF, 0x09, 0x09, 0x09, 0x09, 0x01, 0x00},
	// G
	{0x00, 0x3E, 0x41, 0x41, 0x51, 0x51, 0x32, 0x00},
	// H
	{0x00, 0xFF, 0x08, 0x08, 0x08, 0x08, 0xFF, 0x00},
	// I
	{0x00, 0x41, 0x41, 0xFF, 0x41, 0x41, 0x00, 0x00},
	// J
	{0x00, 0x42, 0x41, 0xFF, 0x40, 0x40, 0x00, 0x00},
	// K
	{0x00, 0xFF, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00},
	// L
	{0x00, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00},
	// M
	{0x00, 0xFF, 0x02, 0x04, 0x08, 0x04, 0x02, 0xFF},
	// N
	{0x00, 0xFF, 0x02, 0x04, 0x08, 0x10, 0xFF, 0x00},
	// O
	{0x00, 0x3E, 0x41, 0x41, 0x41, 0x41, 0x3E, 0x00},
	// P
	{0x00, 0xFF, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00},
	// Q
	{0x00, 0x3E, 0x41, 0x41, 0x61, 0x51, 0x3E, 0x00},
	// R
	{0x00, 0xFF, 0x11, 0x31, 0x51, 0x51, 0x8E, 0x00},
	// S
	{0x00, 0x46, 0x49, 0x49, 0x49, 0x49, 0x31, 0x00},
	// T
	{0x00, 0x01, 0x01, 0xFF, 0x01, 0x01, 0x00, 0x00},
	// U
	{0x00, 0xFF, 0x40, 0x40, 0x40, 0x40, 0xFF, 0x00},
	// V
	{0x00, 0x3F, 0x40, 0x40, 0x40, 0x40, 0x3F, 0x00},
	// W
	{0x00, 0xFF, 0x20, 0x10, 0x08, 0x10, 0x20, 0xFF},
	// X
	{0x00, 0x63, 0x14, 0x08, 0x08, 0x14, 0x63, 0x00},
	// Y
	{0x00, 0x07, 0x08, 0x70, 0x08, 0x07, 0x00, 0x00},
	// Z
	{0x00, 0x61, 0x51, 0x49, 0x45, 0x43, 0x00, 0x00},
	// a
	{0x00, 0x20, 0x54, 0x54, 0x54, 0x54, 0x78, 0x00},
	// b
	{0x00, 0x7F, 0x48, 0x48, 0x48, 0x48, 0x30, 0x00},
	// c
	{0x00, 0x38, 0x44, 0x40, 0x40, 0x44, 0x38, 0x00},
	// d
	{0x00, 0x30, 0x48, 0x48, 0x48, 0x48, 0x7F, 0x00},
	// e
	{0x00, 0x38, 0x54, 0x54, 0x54, 0x50, 0x08, 0x00},
	// f
	{0x00, 0x08, 0x7E, 0x09, 0x01, 0x02, 0x00, 0x00},
	// g
	{0x00, 0x08, 0x14, 0x54, 0x54, 0x54, 0x3C, 0x00},
	// h
	{0x00, 0x7F, 0x08, 0x08, 0x08, 0x08, 0x70, 0x00},
	// i
	{0x00, 0x00, 0x48, 0x7D, 0x40, 0x00, 0x00, 0x00},
	// j
	{0x00, 0x20, 0x40, 0x48, 0x3D, 0x00, 0x00, 0x00},
	// k
	{0x00, 0x7F, 0x10, 0x18, 0x24, 0x44, 0x00, 0x00},
	// l
	{0x00, 0x01, 0x01, 0x7F, 0x40, 0x00, 0x00, 0x00},
	// m
	{0x00, 0x7C, 0x04, 0x18, 0x04, 0x78, 0x00, 0x00},
	// n
	{0x00, 0x7C, 0x08, 0x04, 0x04, 0x78, 0x00, 0x00},
	// o
	{0x00, 0x38, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00},
	// p
	{0x00, 0x7C, 0x14, 0x14, 0x14, 0x14, 0x08, 0x00},
	// q
	{0x00, 0x08, 0x14, 0x14, 0x14, 0x7C, 0x40, 0x00},
	// r
	{0x00, 0x7C, 0x08, 0x04, 0x04, 0x08, 0x00, 0x00},
	// s
	{0x00, 0x48, 0x54, 0x54, 0x54, 0x24, 0x00, 0x00},
	// t
	{0x00, 0x04, 0x3F, 0x44, 0x40, 0x20, 0x00, 0x00},
	// u
	{0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C, 0x00, 0x00},
	// v
	{0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00, 0x00},
	// w
	{0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00, 0x00},
	// x
	{0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00},
	// y
	{0x00, 0x0C, 0x50, 0x50, 0x50, 0x3C, 0x00, 0x00},
	// z
	{0x00, 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00, 0x00},
	// 0
	{0x00, 0x7E, 0xFF, 0xC3, 0xC3, 0xFF, 0x7E, 0x00},
	// 1
	{0x00, 0xC4, 0xC6, 0xFF, 0xFF, 0xC0, 0xC0, 0x00},
	// 2
	{0x00, 0xC6, 0xE7, 0xF3, 0xDB, 0xDF, 0xCE, 0x00},
	// 3
	{0x00, 0x66, 0xE3, 0xC3, 0xDB, 0xFF, 0x66, 0x00},
	// 4
	{0x00, 0x18, 0x1C, 0x16, 0xFF, 0xFF, 0x10, 0x00},
	// 5
	{0x00, 0x6F, 0xEF, 0xC9, 0xC9, 0xF9, 0x71, 0x00},
	// 6
	{0x00, 0x7E, 0xFF, 0xD9, 0xD9, 0xFB, 0x72, 0x00},
	// 7
	{0x00, 0x03, 0x03, 0xF3, 0xFB, 0x0F, 0x07, 0x00},
	// 8
	{0x00, 0x76, 0xFF, 0xDB, 0xDB, 0xFF, 0x76, 0x00},
	// 9
	{0x00, 0x4E, 0xDF, 0xD3, 0xD3, 0xFF, 0x7E, 0x00},
	// Space ' '
	{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	// '.'
	{0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x00},
	// '@'
	{0x00, 0xFE, 0x82, 0xBA, 0xBA, 0xBA, 0xBE, 0x00}
};
/* ------------------------------------------------------------------------------------ */
#endif /* __SSD1306_FONT_H__ */
/* ------------------------------------------------------------------------------------ */